<?php
/**
 * AttributesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailvio API Reference
 *
 * Mailvio provides a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/KVSocial/mailvio-api  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@mailvio.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * AttributesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttributesApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.mailvio.com/v3');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return AttributesApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createAttribute
     *
     * Creates contact attribute
     *
     * @param string $attribute_category Category of the attribute (required)
     * @param string $attribute_name Name of the attribute (required)
     * @param \Swagger\Client\Model\CreateAttribute $create_attribute Values to create an attribute (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAttribute($attribute_category, $attribute_name, $create_attribute)
    {
        list($response) = $this->createAttributeWithHttpInfo($attribute_category, $attribute_name, $create_attribute);
        return $response;
    }

    /**
     * Operation createAttributeWithHttpInfo
     *
     * Creates contact attribute
     *
     * @param string $attribute_category Category of the attribute (required)
     * @param string $attribute_name Name of the attribute (required)
     * @param \Swagger\Client\Model\CreateAttribute $create_attribute Values to create an attribute (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createAttributeWithHttpInfo($attribute_category, $attribute_name, $create_attribute)
    {
        // verify the required parameter 'attribute_category' is set
        if ($attribute_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_category when calling createAttribute');
        }
        // verify the required parameter 'attribute_name' is set
        if ($attribute_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_name when calling createAttribute');
        }
        // verify the required parameter 'create_attribute' is set
        if ($create_attribute === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_attribute when calling createAttribute');
        }
        // parse inputs
        $resourcePath = "/contacts/attributes/{attributeCategory}/{attributeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($attribute_category !== null) {
            $resourcePath = str_replace(
                "{" . "attributeCategory" . "}",
                $this->apiClient->getSerializer()->toPathValue($attribute_category),
                $resourcePath
            );
        }
        // path params
        if ($attribute_name !== null) {
            $resourcePath = str_replace(
                "{" . "attributeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($attribute_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_attribute)) {
            $_tempBody = $create_attribute;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/attributes/{attributeCategory}/{attributeName}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteAttribute
     *
     * Deletes an attribute
     *
     * @param string $attribute_category Category of the attribute (required)
     * @param string $attribute_name Name of the existing attribute (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAttribute($attribute_category, $attribute_name)
    {
        list($response) = $this->deleteAttributeWithHttpInfo($attribute_category, $attribute_name);
        return $response;
    }

    /**
     * Operation deleteAttributeWithHttpInfo
     *
     * Deletes an attribute
     *
     * @param string $attribute_category Category of the attribute (required)
     * @param string $attribute_name Name of the existing attribute (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteAttributeWithHttpInfo($attribute_category, $attribute_name)
    {
        // verify the required parameter 'attribute_category' is set
        if ($attribute_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_category when calling deleteAttribute');
        }
        // verify the required parameter 'attribute_name' is set
        if ($attribute_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_name when calling deleteAttribute');
        }
        // parse inputs
        $resourcePath = "/contacts/attributes/{attributeCategory}/{attributeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($attribute_category !== null) {
            $resourcePath = str_replace(
                "{" . "attributeCategory" . "}",
                $this->apiClient->getSerializer()->toPathValue($attribute_category),
                $resourcePath
            );
        }
        // path params
        if ($attribute_name !== null) {
            $resourcePath = str_replace(
                "{" . "attributeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($attribute_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/attributes/{attributeCategory}/{attributeName}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAttributes
     *
     * Lists all attributes
     *
     * @return \Swagger\Client\Model\GetAttributes
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAttributes()
    {
        list($response) = $this->getAttributesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getAttributesWithHttpInfo
     *
     * Lists all attributes
     *
     * @return Array of \Swagger\Client\Model\GetAttributes, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getAttributesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/contacts/attributes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetAttributes',
                '/contacts/attributes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetAttributes', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetAttributes', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateAttribute
     *
     * Updates contact attribute
     *
     * @param string $attribute_category Category of the attribute (required)
     * @param string $attribute_name Name of the existing attribute (required)
     * @param \Swagger\Client\Model\UpdateAttribute $update_attribute Values to update an attribute (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAttribute($attribute_category, $attribute_name, $update_attribute)
    {
        list($response) = $this->updateAttributeWithHttpInfo($attribute_category, $attribute_name, $update_attribute);
        return $response;
    }

    /**
     * Operation updateAttributeWithHttpInfo
     *
     * Updates contact attribute
     *
     * @param string $attribute_category Category of the attribute (required)
     * @param string $attribute_name Name of the existing attribute (required)
     * @param \Swagger\Client\Model\UpdateAttribute $update_attribute Values to update an attribute (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateAttributeWithHttpInfo($attribute_category, $attribute_name, $update_attribute)
    {
        // verify the required parameter 'attribute_category' is set
        if ($attribute_category === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_category when calling updateAttribute');
        }
        // verify the required parameter 'attribute_name' is set
        if ($attribute_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attribute_name when calling updateAttribute');
        }
        // verify the required parameter 'update_attribute' is set
        if ($update_attribute === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_attribute when calling updateAttribute');
        }
        // parse inputs
        $resourcePath = "/contacts/attributes/{attributeCategory}/{attributeName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($attribute_category !== null) {
            $resourcePath = str_replace(
                "{" . "attributeCategory" . "}",
                $this->apiClient->getSerializer()->toPathValue($attribute_category),
                $resourcePath
            );
        }
        // path params
        if ($attribute_name !== null) {
            $resourcePath = str_replace(
                "{" . "attributeName" . "}",
                $this->apiClient->getSerializer()->toPathValue($attribute_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_attribute)) {
            $_tempBody = $update_attribute;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/contacts/attributes/{attributeCategory}/{attributeName}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
