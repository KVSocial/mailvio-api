<?php
/**
 * GetExtendedCampaignStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailvio API Reference
 *
 * Mailvio provides a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/KVSocial/mailvio-api  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@mailvio.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetExtendedCampaignStats Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetExtendedCampaignStats implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getExtendedCampaignStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'global_stats' => 'object',
        'campaign_stats' => 'object[]',
        'mirror_click' => 'int',
        'remaining' => 'int',
        'links_stats' => 'object',
        'stats_by_domain' => '\Swagger\Client\Model\GetStatsByDomain'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'global_stats' => 'globalStats',
        'campaign_stats' => 'campaignStats',
        'mirror_click' => 'mirrorClick',
        'remaining' => 'remaining',
        'links_stats' => 'linksStats',
        'stats_by_domain' => 'statsByDomain'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'global_stats' => 'setGlobalStats',
        'campaign_stats' => 'setCampaignStats',
        'mirror_click' => 'setMirrorClick',
        'remaining' => 'setRemaining',
        'links_stats' => 'setLinksStats',
        'stats_by_domain' => 'setStatsByDomain'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'global_stats' => 'getGlobalStats',
        'campaign_stats' => 'getCampaignStats',
        'mirror_click' => 'getMirrorClick',
        'remaining' => 'getRemaining',
        'links_stats' => 'getLinksStats',
        'stats_by_domain' => 'getStatsByDomain'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['global_stats'] = isset($data['global_stats']) ? $data['global_stats'] : null;
        $this->container['campaign_stats'] = isset($data['campaign_stats']) ? $data['campaign_stats'] : null;
        $this->container['mirror_click'] = isset($data['mirror_click']) ? $data['mirror_click'] : null;
        $this->container['remaining'] = isset($data['remaining']) ? $data['remaining'] : null;
        $this->container['links_stats'] = isset($data['links_stats']) ? $data['links_stats'] : null;
        $this->container['stats_by_domain'] = isset($data['stats_by_domain']) ? $data['stats_by_domain'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['global_stats'] === null) {
            $invalid_properties[] = "'global_stats' can't be null";
        }
        if ($this->container['campaign_stats'] === null) {
            $invalid_properties[] = "'campaign_stats' can't be null";
        }
        if ($this->container['mirror_click'] === null) {
            $invalid_properties[] = "'mirror_click' can't be null";
        }
        if ($this->container['remaining'] === null) {
            $invalid_properties[] = "'remaining' can't be null";
        }
        if ($this->container['links_stats'] === null) {
            $invalid_properties[] = "'links_stats' can't be null";
        }
        if ($this->container['stats_by_domain'] === null) {
            $invalid_properties[] = "'stats_by_domain' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['global_stats'] === null) {
            return false;
        }
        if ($this->container['campaign_stats'] === null) {
            return false;
        }
        if ($this->container['mirror_click'] === null) {
            return false;
        }
        if ($this->container['remaining'] === null) {
            return false;
        }
        if ($this->container['links_stats'] === null) {
            return false;
        }
        if ($this->container['stats_by_domain'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets global_stats
     * @return object
     */
    public function getGlobalStats()
    {
        return $this->container['global_stats'];
    }

    /**
     * Sets global_stats
     * @param object $global_stats Overall statistics of the campaign
     * @return $this
     */
    public function setGlobalStats($global_stats)
    {
        $this->container['global_stats'] = $global_stats;

        return $this;
    }

    /**
     * Gets campaign_stats
     * @return object[]
     */
    public function getCampaignStats()
    {
        return $this->container['campaign_stats'];
    }

    /**
     * Sets campaign_stats
     * @param object[] $campaign_stats List-wise statistics of the campaign.
     * @return $this
     */
    public function setCampaignStats($campaign_stats)
    {
        $this->container['campaign_stats'] = $campaign_stats;

        return $this;
    }

    /**
     * Gets mirror_click
     * @return int
     */
    public function getMirrorClick()
    {
        return $this->container['mirror_click'];
    }

    /**
     * Sets mirror_click
     * @param int $mirror_click Number of clicks on mirror link
     * @return $this
     */
    public function setMirrorClick($mirror_click)
    {
        $this->container['mirror_click'] = $mirror_click;

        return $this;
    }

    /**
     * Gets remaining
     * @return int
     */
    public function getRemaining()
    {
        return $this->container['remaining'];
    }

    /**
     * Sets remaining
     * @param int $remaining Number of remaning emails to send
     * @return $this
     */
    public function setRemaining($remaining)
    {
        $this->container['remaining'] = $remaining;

        return $this;
    }

    /**
     * Gets links_stats
     * @return object
     */
    public function getLinksStats()
    {
        return $this->container['links_stats'];
    }

    /**
     * Sets links_stats
     * @param object $links_stats Statistics about the number of clicks for the links
     * @return $this
     */
    public function setLinksStats($links_stats)
    {
        $this->container['links_stats'] = $links_stats;

        return $this;
    }

    /**
     * Gets stats_by_domain
     * @return \Swagger\Client\Model\GetStatsByDomain
     */
    public function getStatsByDomain()
    {
        return $this->container['stats_by_domain'];
    }

    /**
     * Sets stats_by_domain
     * @param \Swagger\Client\Model\GetStatsByDomain $stats_by_domain
     * @return $this
     */
    public function setStatsByDomain($stats_by_domain)
    {
        $this->container['stats_by_domain'] = $stats_by_domain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


