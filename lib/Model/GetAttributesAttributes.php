<?php
/**
 * GetAttributesAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailvio API Reference
 *
 * Mailvio provides a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/KVSocial/mailvio-api  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@mailvio.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetAttributesAttributes Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetAttributesAttributes implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getAttributes_attributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'name' => 'string',
        'category' => 'string',
        'type' => 'string',
        'enumeration' => '\Swagger\Client\Model\GetAttributesEnumeration[]',
        'calculated_value' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'name' => 'name',
        'category' => 'category',
        'type' => 'type',
        'enumeration' => 'enumeration',
        'calculated_value' => 'calculatedValue'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'name' => 'setName',
        'category' => 'setCategory',
        'type' => 'setType',
        'enumeration' => 'setEnumeration',
        'calculated_value' => 'setCalculatedValue'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'name' => 'getName',
        'category' => 'getCategory',
        'type' => 'getType',
        'enumeration' => 'getEnumeration',
        'calculated_value' => 'getCalculatedValue'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const CATEGORY_NORMAL = 'normal';
    const CATEGORY_TRANSACTIONAL = 'transactional';
    const CATEGORY_CATEGORY = 'category';
    const CATEGORY_CALCULATED = 'calculated';
    const CATEGORY_GLOBAL = 'global';
    const TYPE_TEXT = 'text';
    const TYPE_DATE = 'date';
    const TYPE_FLOAT = 'float';
    const TYPE_ID = 'id';
    const TYPE_BOOLEAN = 'boolean';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_NORMAL,
            self::CATEGORY_TRANSACTIONAL,
            self::CATEGORY_CATEGORY,
            self::CATEGORY_CALCULATED,
            self::CATEGORY_GLOBAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TEXT,
            self::TYPE_DATE,
            self::TYPE_FLOAT,
            self::TYPE_ID,
            self::TYPE_BOOLEAN,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['enumeration'] = isset($data['enumeration']) ? $data['enumeration'] : null;
        $this->container['calculated_value'] = isset($data['calculated_value']) ? $data['calculated_value'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['category'] === null) {
            $invalid_properties[] = "'category' can't be null";
        }
        $allowed_values = array("normal", "transactional", "category", "calculated", "global");
        if (!in_array($this->container['category'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'category', must be one of #{allowed_values}.";
        }

        $allowed_values = array("text", "date", "float", "id", "boolean");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['category'] === null) {
            return false;
        }
        $allowed_values = array("normal", "transactional", "category", "calculated", "global");
        if (!in_array($this->container['category'], $allowed_values)) {
            return false;
        }
        $allowed_values = array("text", "date", "float", "id", "boolean");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the attribute
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets category
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     * @param string $category Category of the attribute
     * @return $this
     */
    public function setCategory($category)
    {
        $allowed_values = array('normal', 'transactional', 'category', 'calculated', 'global');
        if (!in_array($category, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'category', must be one of 'normal', 'transactional', 'category', 'calculated', 'global'");
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of the attribute
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('text', 'date', 'float', 'id', 'boolean');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'text', 'date', 'float', 'id', 'boolean'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets enumeration
     * @return \Swagger\Client\Model\GetAttributesEnumeration[]
     */
    public function getEnumeration()
    {
        return $this->container['enumeration'];
    }

    /**
     * Sets enumeration
     * @param \Swagger\Client\Model\GetAttributesEnumeration[] $enumeration Parameter only available for \"category\" type attributes.
     * @return $this
     */
    public function setEnumeration($enumeration)
    {
        $this->container['enumeration'] = $enumeration;

        return $this;
    }

    /**
     * Gets calculated_value
     * @return string
     */
    public function getCalculatedValue()
    {
        return $this->container['calculated_value'];
    }

    /**
     * Sets calculated_value
     * @param string $calculated_value Calculated value formula
     * @return $this
     */
    public function setCalculatedValue($calculated_value)
    {
        $this->container['calculated_value'] = $calculated_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


