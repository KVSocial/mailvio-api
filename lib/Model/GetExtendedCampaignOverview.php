<?php
/**
 * GetExtendedCampaignOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailvio API Reference
 *
 * Mailvio provides a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/KVSocial/mailvio-api  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@mailvio.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetExtendedCampaignOverview Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetExtendedCampaignOverview implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getExtendedCampaignOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'test_sent' => 'bool',
        'header' => 'string',
        'footer' => 'string',
        'sender' => 'object',
        'reply_to' => 'string',
        'to_field' => 'string',
        'html_content' => 'string',
        'share_link' => 'string',
        'tag' => 'string',
        'created_at' => '\DateTime',
        'modified_at' => '\DateTime',
        'inline_image_activation' => 'bool',
        'mirror_active' => 'bool',
        'recurring' => 'bool',
        'sent_date' => '\DateTime'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'test_sent' => 'testSent',
        'header' => 'header',
        'footer' => 'footer',
        'sender' => 'sender',
        'reply_to' => 'replyTo',
        'to_field' => 'toField',
        'html_content' => 'htmlContent',
        'share_link' => 'shareLink',
        'tag' => 'tag',
        'created_at' => 'createdAt',
        'modified_at' => 'modifiedAt',
        'inline_image_activation' => 'inlineImageActivation',
        'mirror_active' => 'mirrorActive',
        'recurring' => 'recurring',
        'sent_date' => 'sentDate'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'test_sent' => 'setTestSent',
        'header' => 'setHeader',
        'footer' => 'setFooter',
        'sender' => 'setSender',
        'reply_to' => 'setReplyTo',
        'to_field' => 'setToField',
        'html_content' => 'setHtmlContent',
        'share_link' => 'setShareLink',
        'tag' => 'setTag',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'inline_image_activation' => 'setInlineImageActivation',
        'mirror_active' => 'setMirrorActive',
        'recurring' => 'setRecurring',
        'sent_date' => 'setSentDate'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'test_sent' => 'getTestSent',
        'header' => 'getHeader',
        'footer' => 'getFooter',
        'sender' => 'getSender',
        'reply_to' => 'getReplyTo',
        'to_field' => 'getToField',
        'html_content' => 'getHtmlContent',
        'share_link' => 'getShareLink',
        'tag' => 'getTag',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'inline_image_activation' => 'getInlineImageActivation',
        'mirror_active' => 'getMirrorActive',
        'recurring' => 'getRecurring',
        'sent_date' => 'getSentDate'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['test_sent'] = isset($data['test_sent']) ? $data['test_sent'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['to_field'] = isset($data['to_field']) ? $data['to_field'] : null;
        $this->container['html_content'] = isset($data['html_content']) ? $data['html_content'] : null;
        $this->container['share_link'] = isset($data['share_link']) ? $data['share_link'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
        $this->container['inline_image_activation'] = isset($data['inline_image_activation']) ? $data['inline_image_activation'] : null;
        $this->container['mirror_active'] = isset($data['mirror_active']) ? $data['mirror_active'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : null;
        $this->container['sent_date'] = isset($data['sent_date']) ? $data['sent_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['test_sent'] === null) {
            $invalid_properties[] = "'test_sent' can't be null";
        }
        if ($this->container['header'] === null) {
            $invalid_properties[] = "'header' can't be null";
        }
        if ($this->container['footer'] === null) {
            $invalid_properties[] = "'footer' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalid_properties[] = "'sender' can't be null";
        }
        if ($this->container['reply_to'] === null) {
            $invalid_properties[] = "'reply_to' can't be null";
        }
        if ($this->container['to_field'] === null) {
            $invalid_properties[] = "'to_field' can't be null";
        }
        if ($this->container['html_content'] === null) {
            $invalid_properties[] = "'html_content' can't be null";
        }
        if ($this->container['tag'] === null) {
            $invalid_properties[] = "'tag' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if ($this->container['modified_at'] === null) {
            $invalid_properties[] = "'modified_at' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['test_sent'] === null) {
            return false;
        }
        if ($this->container['header'] === null) {
            return false;
        }
        if ($this->container['footer'] === null) {
            return false;
        }
        if ($this->container['sender'] === null) {
            return false;
        }
        if ($this->container['reply_to'] === null) {
            return false;
        }
        if ($this->container['to_field'] === null) {
            return false;
        }
        if ($this->container['html_content'] === null) {
            return false;
        }
        if ($this->container['tag'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if ($this->container['modified_at'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets test_sent
     * @return bool
     */
    public function getTestSent()
    {
        return $this->container['test_sent'];
    }

    /**
     * Sets test_sent
     * @param bool $test_sent Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
     * @return $this
     */
    public function setTestSent($test_sent)
    {
        $this->container['test_sent'] = $test_sent;

        return $this;
    }

    /**
     * Gets header
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     * @param string $header Header of the campaign
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets footer
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     * @param string $footer Footer of the campaign
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets sender
     * @return object
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     * @param object $sender
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets reply_to
     * @return string
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     * @param string $reply_to Email defined as the \"Reply to\" of the campaign
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets to_field
     * @return string
     */
    public function getToField()
    {
        return $this->container['to_field'];
    }

    /**
     * Sets to_field
     * @param string $to_field Customisation of the \"to\" field of the campaign
     * @return $this
     */
    public function setToField($to_field)
    {
        $this->container['to_field'] = $to_field;

        return $this;
    }

    /**
     * Gets html_content
     * @return string
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     * @param string $html_content HTML content of the campaign
     * @return $this
     */
    public function setHtmlContent($html_content)
    {
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets share_link
     * @return string
     */
    public function getShareLink()
    {
        return $this->container['share_link'];
    }

    /**
     * Sets share_link
     * @param string $share_link Link to share the campaign on social medias
     * @return $this
     */
    public function setShareLink($share_link)
    {
        $this->container['share_link'] = $share_link;

        return $this;
    }

    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag Tag of the campaign
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     * @return \DateTime
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     * @param \DateTime $modified_at UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets inline_image_activation
     * @return bool
     */
    public function getInlineImageActivation()
    {
        return $this->container['inline_image_activation'];
    }

    /**
     * Sets inline_image_activation
     * @param bool $inline_image_activation Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
     * @return $this
     */
    public function setInlineImageActivation($inline_image_activation)
    {
        $this->container['inline_image_activation'] = $inline_image_activation;

        return $this;
    }

    /**
     * Gets mirror_active
     * @return bool
     */
    public function getMirrorActive()
    {
        return $this->container['mirror_active'];
    }

    /**
     * Sets mirror_active
     * @param bool $mirror_active Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
     * @return $this
     */
    public function setMirrorActive($mirror_active)
    {
        $this->container['mirror_active'] = $mirror_active;

        return $this;
    }

    /**
     * Gets recurring
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     * @param bool $recurring FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets sent_date
     * @return \DateTime
     */
    public function getSentDate()
    {
        return $this->container['sent_date'];
    }

    /**
     * Sets sent_date
     * @param \DateTime $sent_date Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
     * @return $this
     */
    public function setSentDate($sent_date)
    {
        $this->container['sent_date'] = $sent_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


