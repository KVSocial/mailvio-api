<?php
/**
 * GetCampaignOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Mailvio API Reference
 *
 * Mailvio provides a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/KVSocial/mailvio-api  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: support@mailvio.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetCampaignOverview Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetCampaignOverview implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getCampaignOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'name' => 'string',
        'subject' => 'string',
        'type' => 'string',
        'status' => 'string',
        'scheduled_at' => '\DateTime',
        'ab_testing' => 'bool',
        'subject_a' => 'string',
        'subject_b' => 'string',
        'split_rule' => 'int',
        'winner_criteria' => 'string',
        'winner_delay' => 'int',
        'send_at_best_time' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'name' => 'name',
        'subject' => 'subject',
        'type' => 'type',
        'status' => 'status',
        'scheduled_at' => 'scheduledAt',
        'ab_testing' => 'abTesting',
        'subject_a' => 'subjectA',
        'subject_b' => 'subjectB',
        'split_rule' => 'splitRule',
        'winner_criteria' => 'winnerCriteria',
        'winner_delay' => 'winnerDelay',
        'send_at_best_time' => 'sendAtBestTime'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'name' => 'setName',
        'subject' => 'setSubject',
        'type' => 'setType',
        'status' => 'setStatus',
        'scheduled_at' => 'setScheduledAt',
        'ab_testing' => 'setAbTesting',
        'subject_a' => 'setSubjectA',
        'subject_b' => 'setSubjectB',
        'split_rule' => 'setSplitRule',
        'winner_criteria' => 'setWinnerCriteria',
        'winner_delay' => 'setWinnerDelay',
        'send_at_best_time' => 'setSendAtBestTime'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'name' => 'getName',
        'subject' => 'getSubject',
        'type' => 'getType',
        'status' => 'getStatus',
        'scheduled_at' => 'getScheduledAt',
        'ab_testing' => 'getAbTesting',
        'subject_a' => 'getSubjectA',
        'subject_b' => 'getSubjectB',
        'split_rule' => 'getSplitRule',
        'winner_criteria' => 'getWinnerCriteria',
        'winner_delay' => 'getWinnerDelay',
        'send_at_best_time' => 'getSendAtBestTime'
    );

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_CLASSIC = 'classic';
    const TYPE_TRIGGER = 'trigger';
    const STATUS_DRAFT = 'draft';
    const STATUS_SENT = 'sent';
    const STATUS_ARCHIVE = 'archive';
    const STATUS_QUEUED = 'queued';
    const STATUS_SUSPENDED = 'suspended';
    const STATUS_IN_PROCESS = 'in_process';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CLASSIC,
            self::TYPE_TRIGGER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_SENT,
            self::STATUS_ARCHIVE,
            self::STATUS_QUEUED,
            self::STATUS_SUSPENDED,
            self::STATUS_IN_PROCESS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['scheduled_at'] = isset($data['scheduled_at']) ? $data['scheduled_at'] : null;
        $this->container['ab_testing'] = isset($data['ab_testing']) ? $data['ab_testing'] : null;
        $this->container['subject_a'] = isset($data['subject_a']) ? $data['subject_a'] : null;
        $this->container['subject_b'] = isset($data['subject_b']) ? $data['subject_b'] : null;
        $this->container['split_rule'] = isset($data['split_rule']) ? $data['split_rule'] : null;
        $this->container['winner_criteria'] = isset($data['winner_criteria']) ? $data['winner_criteria'] : null;
        $this->container['winner_delay'] = isset($data['winner_delay']) ? $data['winner_delay'] : null;
        $this->container['send_at_best_time'] = isset($data['send_at_best_time']) ? $data['send_at_best_time'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = array("classic", "trigger");
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'type', must be one of #{allowed_values}.";
        }

        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        $allowed_values = array("draft", "sent", "archive", "queued", "suspended", "in_process");
        if (!in_array($this->container['status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'status', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = array("classic", "trigger");
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        $allowed_values = array("draft", "sent", "archive", "queued", "suspended", "in_process");
        if (!in_array($this->container['status'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID of the campaign
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the campaign
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of campaign
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = array('classic', 'trigger');
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'type', must be one of 'classic', 'trigger'");
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Status of the campaign
     * @return $this
     */
    public function setStatus($status)
    {
        $allowed_values = array('draft', 'sent', 'archive', 'queued', 'suspended', 'in_process');
        if (!in_array($status, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'status', must be one of 'draft', 'sent', 'archive', 'queued', 'suspended', 'in_process'");
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets scheduled_at
     * @return \DateTime
     */
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     * @param \DateTime $scheduled_at UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
     * @return $this
     */
    public function setScheduledAt($scheduled_at)
    {
        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets ab_testing
     * @return bool
     */
    public function getAbTesting()
    {
        return $this->container['ab_testing'];
    }

    /**
     * Sets ab_testing
     * @param bool $ab_testing Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled.
     * @return $this
     */
    public function setAbTesting($ab_testing)
    {
        $this->container['ab_testing'] = $ab_testing;

        return $this;
    }

    /**
     * Gets subject_a
     * @return string
     */
    public function getSubjectA()
    {
        return $this->container['subject_a'];
    }

    /**
     * Sets subject_a
     * @param string $subject_a Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
     * @return $this
     */
    public function setSubjectA($subject_a)
    {
        $this->container['subject_a'] = $subject_a;

        return $this;
    }

    /**
     * Gets subject_b
     * @return string
     */
    public function getSubjectB()
    {
        return $this->container['subject_b'];
    }

    /**
     * Sets subject_b
     * @param string $subject_b Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
     * @return $this
     */
    public function setSubjectB($subject_b)
    {
        $this->container['subject_b'] = $subject_b;

        return $this;
    }

    /**
     * Gets split_rule
     * @return int
     */
    public function getSplitRule()
    {
        return $this->container['split_rule'];
    }

    /**
     * Sets split_rule
     * @param int $split_rule The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`
     * @return $this
     */
    public function setSplitRule($split_rule)
    {
        $this->container['split_rule'] = $split_rule;

        return $this;
    }

    /**
     * Gets winner_criteria
     * @return string
     */
    public function getWinnerCriteria()
    {
        return $this->container['winner_criteria'];
    }

    /**
     * Sets winner_criteria
     * @param string $winner_criteria Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`
     * @return $this
     */
    public function setWinnerCriteria($winner_criteria)
    {
        $this->container['winner_criteria'] = $winner_criteria;

        return $this;
    }

    /**
     * Gets winner_delay
     * @return int
     */
    public function getWinnerDelay()
    {
        return $this->container['winner_delay'];
    }

    /**
     * Sets winner_delay
     * @param int $winner_delay The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`
     * @return $this
     */
    public function setWinnerDelay($winner_delay)
    {
        $this->container['winner_delay'] = $winner_delay;

        return $this;
    }

    /**
     * Gets send_at_best_time
     * @return bool
     */
    public function getSendAtBestTime()
    {
        return $this->container['send_at_best_time'];
    }

    /**
     * Sets send_at_best_time
     * @param bool $send_at_best_time It is true if you have chosen to send your campaign at best time, otherwise it is false
     * @return $this
     */
    public function setSendAtBestTime($send_at_best_time)
    {
        $this->container['send_at_best_time'] = $send_at_best_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


